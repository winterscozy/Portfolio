--Before I got into the analysis of the data I started by coming up with a list of questions that'll help me get insights on my data
--Second I started by collecting my data about spotify's top songs through the yearss. This step was easy as I was able to find a pre made data set on 	[Kaggle](https://www.kaggle.com/datasets/paradisejoy/top-hits-spotify-from-20002019) 
--Next I started cleaning the data to do this I dropped my dataset into Excel and got to work. Since this was a premade dataset I didn't want to change much but I did alter some of the columns formats to make them more understandable during the analysis such as changing the duration column which is measured in ms to seconds
-- With all of that out of the way I now download the clean dataset and take into BigQuery to start analyzing wuth SQL
--To start I get a preview of the data to make sure it looks correct

SELECT *
 FROM `sql-1-345800.spotify.top_songs` 
--

SELECT DISTINCT  year, song, artist
 FROM `sql-1-345800.spotify.top_songs`
WHERE year = 2019

--This is just a test query I ran aas I noticed there may not be the same amount of songs listed in each year. I actually ran this for all the years but since it was a test I'm leaving that query out

--Next I started by looking for the most popular genre 

SELECT genre
 FROM `sql-1-345800.spotify.top_songs`
GROUP BY genre
ORDER BY COUNT(*) DESC

--Then I wanted to see the difference between 2000 and 2019s top genre

SELECT DISTINCT genre, year
 FROM `sql-1-345800.spotify.top_songs`
 WHERE year = 2000
GROUP BY genre,year 

SELECT DISTINCT genre, year
 FROM `sql-1-345800.spotify.top_songs`
 WHERE year = 2019 
 GROUP BY genre,year 
 
 -- Next we're looking for the songs with the highest danceability in 2000 and 2019
 
 SELECT song, artist, danceability, year
 FROM `sql-1-345800.spotify.top_songs`
WHERE year = 2000 
ORDER BY danceability DESC

SELECT song, artist, danceability, year
 FROM `sql-1-345800.spotify.top_songs`
WHERE year = 2019
ORDER BY danceability DESC

SELECT song, artist, danceability, year
 FROM `sql-1-345800.spotify.top_songs`
ORDER BY danceability DESC

--Next we'll be looking at the duration of songs 

SELECT  artist, song, duration, year 
 FROM `sql-1-345800.spotify.top_songs`
 WHERE  year =2000
 ORDER BY duration DESC
 
 SELECT  artist, song, duration, year 
 FROM `sql-1-345800.spotify.top_songs`
 WHERE  year =2019
 ORDER BY duration DESC 
 
 --
 SELECT duration,
        song,
        artist,
        year
 FROM `sql-1-345800.spotify.top_songs`
 ORDER BY duration DESC

-- Now we're going to look at the most popular songs from the years

SELECT *
 FROM `sql-1-345800.spotify.top_songs`
 WHERE year = 2000
 ORDER BY popularity DESC

-- This next code is an interjection for future insights I did before continuing to 2019's query

SELECT *
 FROM `sql-1-345800.spotify.top_songs`
 WHERE explicit = true AND year= 2000
--Popular song query section cont.

SELECT *
 FROM `sql-1-345800.spotify.top_songs`
 WHERE year = 2019
 ORDER BY popularity DESC

SELECT DISTINCT *
 FROM `sql-1-345800.spotify.top_songs`
 ORDER BY popularity DESC


--We're now going to look at energy and how it's changed over time

SELECT *
 FROM `sql-1-345800.spotify.top_songs`
 WHERE year = 2000
 ORDER BY energy ASC
 
 SELECT *
 FROM `sql-1-345800.spotify.top_songs`
 WHERE year = 2019
 ORDER BY energy ASC
 
 SELECT *
 FROM `sql-1-345800.spotify.top_songs`
 ORDER BY energy ASC

-- We'll now be looking at how songs with high and low loudness(db) is perceived in terms of popularity and also where they compare in genre


 
 
 
 
 




